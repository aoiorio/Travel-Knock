name: 🍎📦🚀 Build & deploy iOS app to the App Store Connect

on:
  push:
    branches: [main, create/ci, develop]
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string
      environment-url:
        required: true
        type: string
      short-environment-name:
        required: true
        type: string
      flavor:
        required: true
        type: string
      new-pubspec-version:
        required: true
        type: string

jobs:
  deployIos:
    name: 🍏📦🚀 Build & deploy iOS to the App Store Connect ${{ inputs.short-environment-name }} release
    runs-on: macos-latest
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
      - name: 🔐 Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: '${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}'
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: '${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}'
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: '${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}'
          KEYCHAIN_PASSWORD: '${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}'
          EXPORT_OPTIONS_BASE64: '${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}'
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/ios/Runner/ExportOptions.plist"

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: ⚙️🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 3.2.3

      - name: ⚙️🍃 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.3'
          channel: 'stable'
          cache: true
        id: flutter

      # Create env file by using secrets. so The error won't occur
      - name: 🤓 Create .env file for Supabase API keys
        run: |
          touch .env
          echo "SUPABASE_ANON=${{ secrets.SUPABASE_ANON }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env

      - name: ✏️ Change the app version
        run: |
          # Versionの更新
          perl -i -pe 's/^(version:)(\s+\d+\.\d+\.)(\d+)(\+)(\d+)$/$1.$2.($3+1).$4.$5/e' pubspec.yaml

          # 別のstepで更新されたVerisonを利用するための後処理
          VAR=`perl -ne 'print if /^(version:)(\s+\d+\.\d+\.)(\d+)(\+)(\d+)$/' pubspec.yaml`
          VAR_APP_VERSION=`echo $VAR | grep -o -E "([0-9]+\.){1}[0-9]+(\.[0-9]+)?" | head -n1`
          echo "::set-output name=APP_VERSION::${VAR_APP_VERSION}"

      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: 🌞 Build IPA
        run: flutter build ipa --export-options-plist=ios/Runner/ExportOptions.plist --build-number ${GITHUB_RUN_NUMBER} --dart-define=FLUTTER_BUILD_NAME=${{secrets.APP_VERSION}}

      - name: 🥞 Generate p8 for Apple private_keys
        run: echo '${{ secrets.AUTH_P8 }}' | base64 -d > ${{ github.workspace }}/private_keys/AuthKey_YRKS9K5635.p8

      # 🧠 UPLOAD TO THE APP STORE CONNECT
      - name: 🦷 Deploy to the App Store
        run: xcrun altool --upload-app -f "${{ github.workspace }}/build/ios/ipa/travelknock.ipa" -t ios --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }} --verbose

      - name: 💬 Pick a random success catchphrase
        if: success()
        id: success_catchphrase
        run: |
          sentences=('🤩 AMAZING !' 'Woop woop 🎉' 'Oh wow 😮' '😎 Yeahhhh !' '📣 Amazing announcement !' '📢 Your attention please...' '👏 Great work !' '🍾 Champagne !' '🙌 High five !' '🥳 Time to celebrate !')
          arrayLength=${#sentences[@]}
          randomNumber=$(($RANDOM%$arrayLength))
          pickedSentence=${sentences[$randomNumber]}
          echo "picked_sentence=$pickedSentence" >> $GITHUB_OUTPUT